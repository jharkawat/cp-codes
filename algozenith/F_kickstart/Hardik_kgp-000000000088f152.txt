//#include <ext/pb_ds/assoc_container.hpp>
#include <bits/stdc++.h>
using namespace std;
//using namespace __gnu_pbds;
//template <class c, class cmp = less<c> > using ordered_set = tree<c, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
#define IOS ios_base::sync_with_stdio(false);cin.tie(NULL); 
#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
  cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
  const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...) 
#endif
template<class T> ostream& operator<<(ostream &os, vector<T> V) {os << "[ "; for(auto v : V) os << v << " "; return os << "]";}
template<class L, class R> ostream& operator<<(ostream &os, pair<L,R> P) {return os << "(" << P.first << "," << P.second << ")";}
template <typename T,typename U>pair<T,U> operator+(const pair<T,U> & l,const std::pair<T,U> & r) { return {l.first+r.first,l.second+r.second};}
typedef long long int ll;
const ll mod =1e9+7;
const int maxn = 15;
#define endl '\n'
#define int ll
#define ld long double
#define all(x) (x).begin(),(x).end()

int32_t main()
{ 
  IOS


  int testcases = 1;
  cin>>testcases;
  for(int test = 1;test<=testcases;test++)
  {
    cout<<"Case #"<<test<<": ";
    int d, n, k;
    cin >> d >> n >> k;

    // trace(d, n, k);

    vector<int> g[d + 1], en[d + 1];
    for(int i= 1;i<=n;i++){
      int s, e, h;
      cin >> h >> s >> e;
      // trace(s, e, h);
      g[s].push_back(h);
      en[e].push_back(h);
    }

    int ans = 0;
    int sum = 0;
    multiset<int> man, wo;
    auto add = [&](int x){
      
      if(man.size() < k){
        man.insert(x);
        sum += x;
        return ;
      }
      if(x > *man.begin()){
        int y = *man.begin();
        man.erase(man.find(y));
        wo.insert(y);
        man.insert(x);
        sum += x - y;
      }
      else{
        wo.insert(x);
      }
    };

    auto rem = [&](int x){
      
      if(wo.size() == 0){
        man.erase(man.find(x));
        sum -= x;
        return ;
      }
      if(wo.find(x) != wo.end()){
        wo.erase(wo.find(x));
        return ;
      }
      man.erase(man.find(x));
      sum -= x;
      int y = *wo.rbegin();
      man.insert(y);
      sum += y;
      wo.erase(wo.find(y));
    };

    for(int i= 1;i<=d;i++){
      for(auto v : g[i]) add(v);
      ans = max(ans, sum);

      for(auto v: en[i]) rem(v);
    }

    cout << ans << endl;


    
    


  }

 


  

  

	

  
  
  


  
  

}
 